/* tslint:disable */
/* eslint-disable */
/**
 * Odysseus identity manager server
 * A service that handles all authentication processes with 2fa, uses ory hydra to handle OpenID and OAuth2 requests
 *
 * The version of the OpenAPI document: 0.7.2
 * Contact: simoneromano@tutanota.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserInfoAddress,
    UserInfoAddressFromJSON,
    UserInfoAddressFromJSONTyped,
    UserInfoAddressToJSON,
} from './';

/**
 * Available User info

 SCOPES:
 * email -> This scope value requests access to the following claims:
 	* email
 	* email_verified
 * profile -> This scope value requests access to the End-User's default profile claims:
 	* name,
 	* family_name,
 	* given_name,
 	* middle_name,
 	* nickname,
 	* preferred_username,
 	* profile,
		* picture,
		* website,
		* gender,
		* birthdate,
		* zoneinfo,
		* locale,
		* updated_at.
 * address -> This scope value requests access to the following claims:
 	* address
 * phone -> This scope value requests access to the following claims:  
 	* phone_number,
 	* phone_number_verified.
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * The ID of the model and the Subject: Identifier for the End-User at the Issuer.
     * @type {object}
     * @memberof UserInfo
     */
    id?: object;
    /**
     * 
     * @type {UserInfoAddress}
     * @memberof UserInfo
     */
    address?: UserInfoAddress;
    /**
     * End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
     * @type {string}
     * @memberof UserInfo
     */
    birthdate?: string;
    /**
     * End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax
     * @type {string}
     * @memberof UserInfo
     */
    email?: string;
    /**
     * If the user email has been verified
     * @type {boolean}
     * @memberof UserInfo
     */
    emailVerified?: boolean;
    /**
     * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof UserInfo
     */
    familyName?: string;
    /**
     * End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
     * @type {string}
     * @memberof UserInfo
     */
    gender?: UserInfoGenderEnum;
    /**
     * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof UserInfo
     */
    givenName?: string;
    /**
     * End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
     * @type {string}
     * @memberof UserInfo
     */
    locale?: string;
    /**
     * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     * @type {string}
     * @memberof UserInfo
     */
    middleName?: string;
    /**
     * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     * @type {string}
     * @memberof UserInfo
     */
    nickname?: string;
    /**
     * End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     * @type {string}
     * @memberof UserInfo
     */
    phoneNumber?: string;
    /**
     * True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
     * @type {boolean}
     * @memberof UserInfo
     */
    phoneNumberVerified?: boolean;
    /**
     * URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
     * @type {string}
     * @memberof UserInfo
     */
    picture?: string;
    /**
     * Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
     * @type {string}
     * @memberof UserInfo
     */
    preferredUsername?: string;
    /**
     * URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
     * @type {string}
     * @memberof UserInfo
     */
    profile?: string;
    /**
     * URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     * @type {string}
     * @memberof UserInfo
     */
    website?: string;
    /**
     * String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
     * @type {string}
     * @memberof UserInfo
     */
    zoneinfo?: string;
}

/**
* @export
* @enum {string}
*/
export enum UserInfoGenderEnum {
    Male = 'Male',
    Female = 'Female'
}

export function UserInfoFromJSON(json: any): UserInfo {
    return UserInfoFromJSONTyped(json, false);
}

export function UserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, '_id') ? undefined : json['_id'],
        'address': !exists(json, 'address') ? undefined : UserInfoAddressFromJSON(json['address']),
        'birthdate': !exists(json, 'birthdate') ? undefined : json['birthdate'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'emailVerified': !exists(json, 'email_verified') ? undefined : json['email_verified'],
        'familyName': !exists(json, 'family_name') ? undefined : json['family_name'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'givenName': !exists(json, 'given_name') ? undefined : json['given_name'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'middleName': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'phoneNumber': !exists(json, 'phone_number') ? undefined : json['phone_number'],
        'phoneNumberVerified': !exists(json, 'phone_number_verified') ? undefined : json['phone_number_verified'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'preferredUsername': !exists(json, 'preferred_username') ? undefined : json['preferred_username'],
        'profile': !exists(json, 'profile') ? undefined : json['profile'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'zoneinfo': !exists(json, 'zoneinfo') ? undefined : json['zoneinfo'],
    };
}

export function UserInfoToJSON(value?: UserInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value.id,
        'address': UserInfoAddressToJSON(value.address),
        'birthdate': value.birthdate,
        'email': value.email,
        'email_verified': value.emailVerified,
        'family_name': value.familyName,
        'gender': value.gender,
        'given_name': value.givenName,
        'locale': value.locale,
        'middle_name': value.middleName,
        'nickname': value.nickname,
        'phone_number': value.phoneNumber,
        'phone_number_verified': value.phoneNumberVerified,
        'picture': value.picture,
        'preferred_username': value.preferredUsername,
        'profile': value.profile,
        'website': value.website,
        'zoneinfo': value.zoneinfo,
    };
}


