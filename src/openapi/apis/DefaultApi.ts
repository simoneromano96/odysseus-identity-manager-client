/* tslint:disable */
/* eslint-disable */
/**
 * Odysseus identity manager server
 * A service that handles all authentication processes with 2fa, uses ory hydra to handle OpenID and OAuth2 requests
 *
 * The version of the OpenAPI document: 0.7.1-alpha.5
 * Contact: simoneromano@tutanota.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptedRequest,
    AcceptedRequestFromJSON,
    AcceptedRequestToJSON,
    LoginInput,
    LoginInputFromJSON,
    LoginInputToJSON,
    NewUserInput,
    NewUserInputFromJSON,
    NewUserInputToJSON,
    OAuthConsentBody,
    OAuthConsentBodyFromJSON,
    OAuthConsentBodyToJSON,
    UserInfo,
    UserInfoFromJSON,
    UserInfoToJSON,
} from '../models';

export interface ApiV1ConsentPostRequest {
    consentChallenge: string;
    body: OAuthConsentBody;
}

export interface ApiV1LocalLoginPostRequest {
    body: LoginInput;
}

export interface ApiV1LocalSignupPostRequest {
    body: NewUserInput;
}

export interface ApiV1LocalValidateEmailGetRequest {
    code: string;
}

export interface ApiV1LoginPostRequest {
    loginChallenge: string;
    body: LoginInput;
}

export interface ApiV1LogoutPostRequest {
    logoutChallenge: string;
}

export interface ApiV1OauthConsentGetRequest {
    consentChallenge: string;
}

export interface ApiV1OauthLoginGetRequest {
    loginChallenge: string;
}

export interface ApiV1OauthLogoutGetRequest {
    logoutChallenge: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Accepts the consent request, responds with a redirect to follow
     * User consent
     */
    async apiV1ConsentPostRaw(requestParameters: ApiV1ConsentPostRequest): Promise<runtime.ApiResponse<AcceptedRequest>> {
        if (requestParameters.consentChallenge === null || requestParameters.consentChallenge === undefined) {
            throw new runtime.RequiredError('consentChallenge','Required parameter requestParameters.consentChallenge was null or undefined when calling apiV1ConsentPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiV1ConsentPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.consentChallenge !== undefined) {
            queryParameters['consent_challenge'] = requestParameters.consentChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/consent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthConsentBodyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptedRequestFromJSON(jsonValue));
    }

    /**
     * Accepts the consent request, responds with a redirect to follow
     * User consent
     */
    async apiV1ConsentPost(requestParameters: ApiV1ConsentPostRequest): Promise<AcceptedRequest> {
        const response = await this.apiV1ConsentPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logs in the user into Odysseus
     * User local login
     */
    async apiV1LocalLoginPostRaw(requestParameters: ApiV1LocalLoginPostRequest): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiV1LocalLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/local/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Logs in the user into Odysseus
     * User local login
     */
    async apiV1LocalLoginPost(requestParameters: ApiV1LocalLoginPostRequest): Promise<UserInfo> {
        const response = await this.apiV1LocalLoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new user but doesn\'t log in the user
     * User signup
     */
    async apiV1LocalSignupPostRaw(requestParameters: ApiV1LocalSignupPostRequest): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiV1LocalSignupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/local/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUserInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Creates a new user but doesn\'t log in the user
     * User signup
     */
    async apiV1LocalSignupPost(requestParameters: ApiV1LocalSignupPostRequest): Promise<UserInfo> {
        const response = await this.apiV1LocalSignupPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets current user info from session
     * Current user info
     */
    async apiV1LocalUserInfoGetRaw(): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/local/user-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Gets current user info from session
     * Current user info
     */
    async apiV1LocalUserInfoGet(): Promise<UserInfo> {
        const response = await this.apiV1LocalUserInfoGetRaw();
        return await response.value();
    }

    /**
     * Validates user email, will set email_verified to true
     * User email validation
     */
    async apiV1LocalValidateEmailGetRaw(requestParameters: ApiV1LocalValidateEmailGetRequest): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling apiV1LocalValidateEmailGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/local/validate-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Validates user email, will set email_verified to true
     * User email validation
     */
    async apiV1LocalValidateEmailGet(requestParameters: ApiV1LocalValidateEmailGetRequest): Promise<UserInfo> {
        const response = await this.apiV1LocalValidateEmailGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logs in the user via the provided credentials, responds with a redirect to follow
     * User login
     */
    async apiV1LoginPostRaw(requestParameters: ApiV1LoginPostRequest): Promise<runtime.ApiResponse<AcceptedRequest>> {
        if (requestParameters.loginChallenge === null || requestParameters.loginChallenge === undefined) {
            throw new runtime.RequiredError('loginChallenge','Required parameter requestParameters.loginChallenge was null or undefined when calling apiV1LoginPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling apiV1LoginPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.loginChallenge !== undefined) {
            queryParameters['login_challenge'] = requestParameters.loginChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptedRequestFromJSON(jsonValue));
    }

    /**
     * Logs in the user via the provided credentials, responds with a redirect to follow
     * User login
     */
    async apiV1LoginPost(requestParameters: ApiV1LoginPostRequest): Promise<AcceptedRequest> {
        const response = await this.apiV1LoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logs out the user, responds with a redirect to follow
     * User logout
     */
    async apiV1LogoutPostRaw(requestParameters: ApiV1LogoutPostRequest): Promise<runtime.ApiResponse<AcceptedRequest>> {
        if (requestParameters.logoutChallenge === null || requestParameters.logoutChallenge === undefined) {
            throw new runtime.RequiredError('logoutChallenge','Required parameter requestParameters.logoutChallenge was null or undefined when calling apiV1LogoutPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.logoutChallenge !== undefined) {
            queryParameters['logout_challenge'] = requestParameters.logoutChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptedRequestFromJSON(jsonValue));
    }

    /**
     * Logs out the user, responds with a redirect to follow
     * User logout
     */
    async apiV1LogoutPost(requestParameters: ApiV1LogoutPostRequest): Promise<AcceptedRequest> {
        const response = await this.apiV1LogoutPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Starts the consent request flow, responds with a redirect
     * User consent
     */
    async apiV1OauthConsentGetRaw(requestParameters: ApiV1OauthConsentGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consentChallenge === null || requestParameters.consentChallenge === undefined) {
            throw new runtime.RequiredError('consentChallenge','Required parameter requestParameters.consentChallenge was null or undefined when calling apiV1OauthConsentGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.consentChallenge !== undefined) {
            queryParameters['consent_challenge'] = requestParameters.consentChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/oauth/consent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts the consent request flow, responds with a redirect
     * User consent
     */
    async apiV1OauthConsentGet(requestParameters: ApiV1OauthConsentGetRequest): Promise<void> {
        await this.apiV1OauthConsentGetRaw(requestParameters);
    }

    /**
     * Starts the OAuth login flow, responds with a redirect
     * User login
     */
    async apiV1OauthLoginGetRaw(requestParameters: ApiV1OauthLoginGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginChallenge === null || requestParameters.loginChallenge === undefined) {
            throw new runtime.RequiredError('loginChallenge','Required parameter requestParameters.loginChallenge was null or undefined when calling apiV1OauthLoginGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.loginChallenge !== undefined) {
            queryParameters['login_challenge'] = requestParameters.loginChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/oauth/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts the OAuth login flow, responds with a redirect
     * User login
     */
    async apiV1OauthLoginGet(requestParameters: ApiV1OauthLoginGetRequest): Promise<void> {
        await this.apiV1OauthLoginGetRaw(requestParameters);
    }

    /**
     * Starts the logout flow, responds with a redirect
     * User logout
     */
    async apiV1OauthLogoutGetRaw(requestParameters: ApiV1OauthLogoutGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logoutChallenge === null || requestParameters.logoutChallenge === undefined) {
            throw new runtime.RequiredError('logoutChallenge','Required parameter requestParameters.logoutChallenge was null or undefined when calling apiV1OauthLogoutGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.logoutChallenge !== undefined) {
            queryParameters['logout_challenge'] = requestParameters.logoutChallenge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/oauth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts the logout flow, responds with a redirect
     * User logout
     */
    async apiV1OauthLogoutGet(requestParameters: ApiV1OauthLogoutGetRequest): Promise<void> {
        await this.apiV1OauthLogoutGetRaw(requestParameters);
    }

}
